import { Stack, StackProps, CfnOutput } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { Bucket, CfnBucket } from 'aws-cdk-lib/aws-s3';
import { PolicyStatement, Effect, AnyPrincipal } from 'aws-cdk-lib/aws-iam';
import { S3Bucket } from '../constructs/s3-bucket';
import { frontendConfig } from '../../config/frontend-config';

export interface FrontendStackProps extends StackProps {
  apiUrl: string;
}

export class FrontendStack extends Stack {
  public readonly bucket: Bucket;

  constructor(scope: Construct, id: string, props: FrontendStackProps) {
    super(scope, id, props);

    const stage = this.node.tryGetContext('stage') || 'dev';
    const config = frontendConfig[stage];

    if (!config) {
      throw new Error(`No frontend configuration found for stage: ${stage}`);
    }

    // Create S3 bucket for frontend hosting (CDK will generate unique name)
    const s3Construct = new S3Bucket(this, 'FrontendBucket', {
      // bucketName: undefined, // Let CDK generate unique name
      enableVersioning: config.enableVersioning,
      enableEncryption: true,
      // Only allow public access if CloudFront is not enabled (dev environment)
      blockPublicAccess: config.enableCloudFront, // Block public access when using CloudFront
    });

    this.bucket = s3Construct.bucket;

    // Only configure public access if CloudFront is not enabled
    if (!config.enableCloudFront) {
      // Configure bucket for static website hosting
      this.bucket.addToResourcePolicy(
        new PolicyStatement({
          sid: 'PublicReadGetObject',
          effect: Effect.ALLOW,
          principals: [new AnyPrincipal()],
          actions: ['s3:GetObject'],
          resources: [`${this.bucket.bucketArn}/*`],
        })
      );

      // Add bucket website configuration
      const cfnBucket = this.bucket.node.defaultChild as CfnBucket;
      cfnBucket.websiteConfiguration = {
        indexDocument: 'index.html',
        errorDocument: 'error.html',
      };
    }

    // Output the bucket name (auto-generated by CDK)
    new CfnOutput(this, 'BucketName', {
      value: this.bucket.bucketName,
      description: 'S3 bucket name for frontend hosting',
    });

    // Output the website URL (different based on CloudFront usage)
    new CfnOutput(this, 'WebsiteURL', {
      value: config.enableCloudFront 
        ? `CloudFront distribution would be created for ${this.bucket.bucketName}`
        : this.bucket.bucketWebsiteUrl,
      description: config.enableCloudFront 
        ? 'CloudFront distribution (not implemented in this example)'
        : 'URL for website hosted on S3',
    });

    // Output API URL for frontend configuration
    new CfnOutput(this, 'ApiURL', {
      value: props.apiUrl,
      description: 'API Gateway URL for frontend to use',
    });
  }
}